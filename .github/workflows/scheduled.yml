# This is a basic workflow that is manually triggered

name: Daily build workflow
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: {}
  pull_request:
    branches:
      - "main"
  push:
    branches:
      - "main"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}

      - name: Docker Login
        id: docker-login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Find SHA
        id: find-sha
        run: |
          echo "OPENAPI_SHA_SHORT=$(curl -s --header "Authorization: Bearer $USER_TOKEN" -H 'Accept: application/vnd.github.v3+json' 'https://api.github.com/repos/portworx/DreamCloud_stella-api/branches/develop'  | jq -r '.commit.sha[:7]')" >> $GITHUB_ENV
        env:
          USER_TOKEN: ${{ secrets.REPO_TOKEN }}

      - name: Pull image
        id: pull-image
        run: |
          docker pull portworx/pds-api:openapi-dev-${{ env.OPENAPI_SHA_SHORT }}

      - name: Get swagger doc
        run: |
          docker create --name pds-api-openapi portworx/pds-api:openapi-dev-${{ env.OPENAPI_SHA_SHORT }} nope
          docker cp pds-api-openapi:/swagger.json ./swagger.json
          docker rm pds-api-openapi

      # - name: Setup node
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 14
      #     cache: npm
      #     registry-url: https://registry.npmjs.org/
      
      - name: Generate code
        run: |
          npm install -g @openapitools/openapi-generator-cli
          openapi-generator-cli generate -i ./swagger.json -g go -o pds/v1alpha1/ --package-name pds --skip-validate-spec
          git config advice.addIgnoredFile false
      
      - name: setup git config
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git config advice.addIgnoredFile false

      # - uses: stefanzweifel/git-auto-commit-action@master
      #   with:
      #     commit_message: Autogenerated code for ${{ env.OPENAPI_SHA_SHORT }}
      #     commit_user_email: my-github-actions-bot@example.org
      #     commit_user_name: GitHub Actions
      #     commit_author: Author <actions@github.com>
      #     file_pattern: pds/v1alpha1/**
      #     tagging_message: dev-${{ env.OPENAPI_SHA_SHORT }}
      #     skip_checkout: true
      #     add_options: '-n'
      #     push_options: '--force'
      #     # repository: .          
      #   # env:
      #   #   GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      - name: commit
        run: |
          # Stage the file, commit and push
          git add pds/v1alpha1
          git commit -m "Autogenerated code for ${{ env.OPENAPI_SHA_SHORT }}"
          git push origin main