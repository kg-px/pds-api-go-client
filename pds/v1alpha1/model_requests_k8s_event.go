/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// RequestsK8sEvent struct for RequestsK8sEvent
type RequestsK8sEvent struct {
	// Action that was taken/failed regarding the given object.
	Action *string `json:"action,omitempty"`
	// Count informs about how many times event was generated.
	Count *int64 `json:"count,omitempty"`
	// Message is a human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`
	// Name of the Event resource in target cluster.
	Name *string `json:"name,omitempty"`
	// Reason is a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason *string `json:"reason,omitempty"`
	// ResourceKind is the type of resource being referenced
	ResourceKind *string `json:"resource_kind,omitempty"`
	// ResourceName is the name of resource being referenced
	ResourceName *string `json:"resource_name,omitempty"`
	// Timestamp informs about when did the event occur most recently.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// Type of this event , new types could be added in the future.
	Type *string `json:"type,omitempty"`
}

// NewRequestsK8sEvent instantiates a new RequestsK8sEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestsK8sEvent() *RequestsK8sEvent {
	this := RequestsK8sEvent{}
	return &this
}

// NewRequestsK8sEventWithDefaults instantiates a new RequestsK8sEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestsK8sEventWithDefaults() *RequestsK8sEvent {
	this := RequestsK8sEvent{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *RequestsK8sEvent) SetAction(v string) {
	o.Action = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *RequestsK8sEvent) SetCount(v int64) {
	o.Count = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RequestsK8sEvent) SetMessage(v string) {
	o.Message = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RequestsK8sEvent) SetName(v string) {
	o.Name = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RequestsK8sEvent) SetReason(v string) {
	o.Reason = &v
}

// GetResourceKind returns the ResourceKind field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetResourceKind() string {
	if o == nil || o.ResourceKind == nil {
		var ret string
		return ret
	}
	return *o.ResourceKind
}

// GetResourceKindOk returns a tuple with the ResourceKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetResourceKindOk() (*string, bool) {
	if o == nil || o.ResourceKind == nil {
		return nil, false
	}
	return o.ResourceKind, true
}

// HasResourceKind returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasResourceKind() bool {
	if o != nil && o.ResourceKind != nil {
		return true
	}

	return false
}

// SetResourceKind gets a reference to the given string and assigns it to the ResourceKind field.
func (o *RequestsK8sEvent) SetResourceKind(v string) {
	o.ResourceKind = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *RequestsK8sEvent) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *RequestsK8sEvent) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RequestsK8sEvent) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestsK8sEvent) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RequestsK8sEvent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RequestsK8sEvent) SetType(v string) {
	o.Type = &v
}

func (o RequestsK8sEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.ResourceKind != nil {
		toSerialize["resource_kind"] = o.ResourceKind
	}
	if o.ResourceName != nil {
		toSerialize["resource_name"] = o.ResourceName
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRequestsK8sEvent struct {
	value *RequestsK8sEvent
	isSet bool
}

func (v NullableRequestsK8sEvent) Get() *RequestsK8sEvent {
	return v.value
}

func (v *NullableRequestsK8sEvent) Set(val *RequestsK8sEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestsK8sEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestsK8sEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestsK8sEvent(val *RequestsK8sEvent) *NullableRequestsK8sEvent {
	return &NullableRequestsK8sEvent{value: val, isSet: true}
}

func (v NullableRequestsK8sEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestsK8sEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


